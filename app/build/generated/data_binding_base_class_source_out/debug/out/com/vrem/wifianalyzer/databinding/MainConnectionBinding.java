// Generated by view binder compiler. Do not edit!
package com.vrem.wifianalyzer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.vrem.wifianalyzer.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MainConnectionBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout connection;

  @NonNull
  public final LinearLayout connectionDetail;

  @NonNull
  public final TextView ipAddress;

  @NonNull
  public final TextView linkSpeed;

  @NonNull
  public final LinearLayout mainConnection;

  private MainConnectionBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout connection,
      @NonNull LinearLayout connectionDetail, @NonNull TextView ipAddress,
      @NonNull TextView linkSpeed, @NonNull LinearLayout mainConnection) {
    this.rootView = rootView;
    this.connection = connection;
    this.connectionDetail = connectionDetail;
    this.ipAddress = ipAddress;
    this.linkSpeed = linkSpeed;
    this.mainConnection = mainConnection;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MainConnectionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MainConnectionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.main_connection, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MainConnectionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.connection;
      LinearLayout connection = ViewBindings.findChildViewById(rootView, id);
      if (connection == null) {
        break missingId;
      }

      id = R.id.connectionDetail;
      LinearLayout connectionDetail = ViewBindings.findChildViewById(rootView, id);
      if (connectionDetail == null) {
        break missingId;
      }

      id = R.id.ipAddress;
      TextView ipAddress = ViewBindings.findChildViewById(rootView, id);
      if (ipAddress == null) {
        break missingId;
      }

      id = R.id.linkSpeed;
      TextView linkSpeed = ViewBindings.findChildViewById(rootView, id);
      if (linkSpeed == null) {
        break missingId;
      }

      LinearLayout mainConnection = (LinearLayout) rootView;

      return new MainConnectionBinding((LinearLayout) rootView, connection, connectionDetail,
          ipAddress, linkSpeed, mainConnection);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
